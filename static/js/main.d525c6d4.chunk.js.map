{"version":3,"sources":["utils/designSystemRenderer.js","App/index.js","serviceWorker.js","index.js"],"names":["DSRenderer","data","CardComp","components","shadow","style","minHeight","padding","backgroundColor","minWidth","body","RowComp","map","index","type","rest","Comp","key","renderBody","sampleCardJSON","require","App","useState","cardData","setCardData","JSON","stringify","editorData","setEditorData","pageHeaderOptions","title","className","width","height","language","theme","value","options","selectOnLineNumbers","onChange","e","temp","parse","editorDidMount","editor","monaco","focus","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","process","exact","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6ZAgCeA,EAhBI,SAAAC,GACjB,IAAMC,EAAWC,OAYjB,OAVE,kBAACD,EAAD,CACEE,OAAO,SACPC,MAAO,CACPC,UAAW,QACXC,QAAS,OACTC,gBAAiB,QACjBC,SAAU,UACTR,EAAKS,MAvBO,SAAAA,GACjB,IAAMC,EAAUR,MAChB,OAAOO,EAAKE,KAAI,SAACX,EAAMY,GAAW,IACxBC,EAAkBb,EAAlBa,KAASC,EADc,YACLd,EADK,UAEzBe,EAAOF,EAAOX,EAAWW,GAAQ,KACvC,OACE,kBAACH,EAAD,CAASM,IAAKJ,GACXG,GAAQ,kBAACA,EAASD,OAgBPG,CAAWjB,EAAKS,Q,kBCrB9BS,EAAiBC,EAAQ,KAoDhBC,EAlDH,WAAO,IAAD,EACgBC,mBAASH,GADzB,mBACTI,EADS,KACCC,EADD,OAEoBF,mBAASG,KAAKC,UAAUP,EAAgB,KAAM,IAFlE,mBAETQ,EAFS,KAEGC,EAFH,KAsBVC,EAAoB,CACxBC,MAAO,uBAGT,OACE,yBAAKC,UAAU,OACb,kBAAC,aAAeF,GAChB,yBAAKE,UAAU,YACb,yBAAKA,UAAU,cACb,kBAAC,UAAD,CACEC,MAAM,QACNC,OAAO,qBACPC,SAAS,OACTC,MAAM,WACNC,MAAOT,EACPU,QAjCM,CACdC,qBAAqB,GAiCbC,SA1Bc,SAACtC,EAAMuC,GAE7B,IAAIC,EADJb,EAAc3B,GAEd,IACEwC,EAAOhB,KAAKiB,MAAMzC,GAClBuB,EAAYiB,GACZ,MAAOD,MAqBDG,eA/Ba,SAACC,EAAQC,GAC9BD,EAAOE,YAiCH,yBAAKf,UAAU,gBACZ/B,EAAWuB,OCtCFwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qBCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAQC,SAAUC,aAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,UAKRC,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d525c6d4.chunk.js","sourcesContent":["import React from 'react';\nimport * as components from '@innovaccer/design-system';\n\nconst renderBody = body => {\n  const RowComp = components[\"Row\"];\n  return body.map((data, index) => {\n    const { type, ...rest } = data;\n    const Comp = type ? components[type] : null;\n    return (\n      <RowComp key={index}>\n        {Comp && <Comp {...rest}></Comp>}\n      </RowComp>\n    )\n  })\n}\n\nconst DSRenderer = data => {\n  const CardComp = components['Card'];\n  const template = (\n    <CardComp\n      shadow=\"medium\"\n      style={{\n      minHeight: '250px',\n      padding: '16px',\n      backgroundColor: 'white',\n      minWidth: '150px'}}>\n      {data.body && renderBody(data.body)}\n    </CardComp>\n  );\n  return template;\n};\n\nexport default DSRenderer;","import React, { useState } from 'react';\nimport DSRenderer from '../utils/designSystemRenderer';\nimport './App.css';\nimport MonacoEditor from 'react-monaco-editor';\nimport { PageHeader } from '@innovaccer/design-system';\nconst sampleCardJSON = require('./card.json');\n\nconst App = () => {\n  const [cardData, setCardData] = useState(sampleCardJSON);\n  const [editorData, setEditorData] = useState(JSON.stringify(sampleCardJSON, null, 2));\n\n  const options = {\n    selectOnLineNumbers: true\n  };\n\n  const editorDidMount = (editor, monaco) => {\n    editor.focus();\n  }\n\n  const handleJsonInput = (data, e) => {\n    setEditorData(data)\n    let temp;\n    try {\n      temp = JSON.parse(data);\n      setCardData(temp);\n    } catch (e) {\n    }\n  }\n\n  const pageHeaderOptions = {\n    title: 'Design System Cards'\n  };\n\n  return (\n    <div className=\"App\">\n      <PageHeader {...pageHeaderOptions} />\n      <div className=\"App-body\">\n        <div className=\"App-editor\">\n          <MonacoEditor\n            width=\"600px\"\n            height=\"calc(100vh - 32px)\"\n            language=\"json\"\n            theme=\"vs-light\"\n            value={editorData}\n            options={options}\n            onChange={handleJsonInput}\n            editorDidMount={editorDidMount}\n          />\n        </div>\n        <div className=\"App-template\">\n          {DSRenderer(cardData)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route exact path=\"/\">\n          <App />\n        </Route>\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}